int Solution::firstMissingPositive(vector<int> &A) {
//int n=A.size();
/*vector<int> a(n+1,0);
int min = INT_MAX;
for(int i=0;i<n;i++){
if(A[i]<min)
min=A[i];
}
int x=1;
if(min<0)
x=1;
else
x=min;
int x=1;
map<int,int> mp;
for(int i=0;i<n;i++)
{
 mp[A[i]]++;   
}
while(mp.find(x)!=mp.end()){
x++;    
}
return x*/
int n=A.size(); 
vector<int> a(n+1,0);
for(int i=1;i<=n;i++){
if(A[i-1]>0 && A[i-1]<=n)    
a[A[i-1]]++;    
}
for(int j=1;j<=n;j++){
if(a[j]==0)
return j;
}
/*memset(arr,0,sizeof(arr));
int n = A.size();
for(auto e : A)
{
if(e<=n and e>0)
arr[e]=1;
}
for(int i =1 ;i <= n ; i++)
{
if(arr[i]==0)
return i ;
}
return n+1;*/
return n+1;
}
// constant space solution
class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
        vector<int> A = nums;
        int n=A.size();
        for(int i=0;i<n;i++){
        while(A[i]>=1 && A[i]<=n && A[i]!=A[A[i]-1])
        swap(A[i],A[A[i]-1]);
        }
        for(int i=0;i<n;i++){
        if(A[i]!=i+1)
         return i+1;   
        }
        return n+1;
    }
};
