#include <iostream>
#include <iterator>
#include <map>
  
using namespace std;
class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
       map<int,int> mp;
       int n=nums.size(); 
       for(int i=0;i<n;i++){
           mp[nums[i]]++;
       } 
        int x;
        for(int i=0;i<n;i++){
         if(mp[nums[i]]==1)
            x=nums[i];
        }
    return x;
    
    }
    
    
};
//following is the binary search solution to find unique element in the array-.............................................O(logn) approach
#include <iostream>
#include <iterator>
#include <map>
  
using namespace std;
class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
    int n=nums.size();
   int low=0;
   int high = n-2;
   while(low<=high){
   int mid=(low+high)/2;
   if(nums[mid]==nums[mid^1])    
   low=mid+1;    
   else
   high=mid-1;    
       
   }     
    
    return nums[low];
        
    }      
        
};
